{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nv1=np.array([1,2,3,4])\nv2=np.array([5,6,7,8])\n#vector addition\nv3=v1+v2\nprint(\"Vector Addition: \",v3)\n\n#vector nultiplication\nv3=v1*v2\nprint(\"Vector Multiplication: \",v3)\n\n#vector dot product\nv4=np.dot(v1,v2)\nprint(\"Vector Dot Product: \",v4)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"linear combination","metadata":{}},{"cell_type":"code","source":"#defining vectors\n#v1=np.array([1,2,3,4])\n#v2=np.array([5,6,7,8])\n\n#defining constants or scalars\na=3\nb=-2\n\n#linear combination= a*v1+b*v2\nresult=a*v1+b*v2\nprint(\"Linear Combination: \",result)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"span","metadata":{}},{"cell_type":"code","source":"A=np.array([[1,2],[3,4]])\nb=np.array([5,3])\n\ncoeffs=np.linalg.solve(A,b)\nprint(\"Coeffecient to express b as a linear combination: \",coeffs)\n#Note: we can't find all the span because it will contain 1000s of vectors, \n#so we will find part of span, \n#in this code, A is a matrix or collection of two vectors\n#b is a target result that we will get at rhs side\n#         A * coeffs= b\n#np.linalg.solve() finds two constant(or coeffecients) through which we will get b","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Basis Vectors","metadata":{}},{"cell_type":"code","source":"#if determinant are non-zero then columns are linearly independent(form a basis)\nd=np.linalg.det(A)\nprint(\"Determinant: \",d)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}